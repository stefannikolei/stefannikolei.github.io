@page "/blog"
@page "/blog/{page:int?}"
@inject BlogPostService BlogPostService
@inject NavigationManager Navigation

<PageTitle>Blog Posts - Stefan Nikolei Tech Blog</PageTitle>

<div class="card">
    <h1>üìù Blog Posts</h1>
    <p>Entdecken Sie meine neuesten Artikel √ºber Technologie, Softwareentwicklung und moderne Web-Technologien.</p>
</div>

@if (paginatedPosts == null)
{
    <div class="loading">
        <p>Lade Blog Posts...</p>
    </div>
}
else if (!paginatedPosts.Posts.Any())
{
    <div class="no-posts">
        <p>Keine Blog Posts gefunden.</p>
    </div>
}
else
{
    <div class="blog-posts-grid">
        @foreach (var post in paginatedPosts.Posts)
        {
            <article class="post-preview">
                <div class="post-header">
                    <h2><a href="/blog/@post.Slug">@post.Title</a></h2>
                    <div class="post-meta">
                        <span>üìÖ @post.PublishDate.ToString("dd. MMMM yyyy")</span>
                        @if (post.Tags.Any())
                        {
                            <span>üìÇ @string.Join(", ", post.Tags)</span>
                        }
                        <span>‚è±Ô∏è @post.ReadingTimeMinutes Min. Lesezeit</span>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(post.Summary))
                {
                    <div class="post-content">
                        <p>@post.Summary</p>
                    </div>
                }
                <div class="post-actions">
                    <a href="/blog/@post.Slug" class="btn">Weiterlesen</a>
                </div>
            </article>
        }
    </div>

    <!-- Pagination -->
    @if (paginatedPosts.TotalPages > 1)
    {
        <nav class="pagination-nav" aria-label="Blog Posts Pagination">
            <div class="pagination-info">
                <span>Seite @paginatedPosts.CurrentPage von @paginatedPosts.TotalPages (@paginatedPosts.TotalPosts Posts insgesamt)</span>
            </div>
            <div class="pagination-buttons">
                @if (paginatedPosts.HasPreviousPage)
                {
                    @if (paginatedPosts.CurrentPage - 1 == 1)
                    {
                        <a href="/blog" class="btn btn-secondary pagination-btn">
                            ‚Üê Vorherige
                        </a>
                    }
                    else
                    {
                        <a href="/blog/@(paginatedPosts.CurrentPage - 1)" class="btn btn-secondary pagination-btn">
                            ‚Üê Vorherige
                        </a>
                    }
                }
                
                @for (int i = Math.Max(1, paginatedPosts.CurrentPage - 2); i <= Math.Min(paginatedPosts.TotalPages, paginatedPosts.CurrentPage + 2); i++)
                {
                    @if (i == paginatedPosts.CurrentPage)
                    {
                        <span class="btn btn-primary pagination-btn current-page">@i</span>
                    }
                    else if (i == 1)
                    {
                        <a href="/blog" class="btn btn-secondary pagination-btn">@i</a>
                    }
                    else
                    {
                        <a href="/blog/@i" class="btn btn-secondary pagination-btn">@i</a>
                    }
                }
                
                @if (paginatedPosts.HasNextPage)
                {
                    <a href="/blog/@(paginatedPosts.CurrentPage + 1)" class="btn btn-secondary pagination-btn">
                        N√§chste ‚Üí
                    </a>
                }
            </div>
        </nav>
    }
}

@code {
    [Parameter] public int? Page { get; set; }
    
    private PaginatedBlogPosts? paginatedPosts;
    private const int PageSize = 5;

    protected override async Task OnParametersSetAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            var currentPage = Page ?? 1;
            paginatedPosts = await BlogPostService.GetPaginatedPostsAsync(currentPage, PageSize);
            
            // Redirect zur ersten Seite wenn die angeforderte Seite nicht existiert
            if (currentPage > paginatedPosts.TotalPages && paginatedPosts.TotalPages > 0)
            {
                Navigation.NavigateTo("/blog/1", replace: true);
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog posts: {ex.Message}");
            paginatedPosts = new PaginatedBlogPosts
            {
                Posts = new List<BlogPost>(),
                CurrentPage = 1,
                TotalPages = 0,
                TotalPosts = 0,
                PageSize = PageSize,
                HasPreviousPage = false,
                HasNextPage = false
            };
        }
    }
}