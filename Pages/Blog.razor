@page "/blog"
@inject BlogPostService BlogPostService

<PageTitle>Blog Posts - Stefan Nikolei Tech Blog</PageTitle>

<div class="card">
    <h1>üìù Blog Posts</h1>
    <p>Entdecken Sie meine neuesten Artikel √ºber Technologie, Softwareentwicklung und moderne Web-Technologien.</p>
</div>

@if (posts == null)
{
    <div class="loading">
        <p>Lade Blog Posts...</p>
    </div>
}
else if (!posts.Any())
{
    <div class="no-posts">
        <p>Keine Blog Posts gefunden.</p>
    </div>
}
else
{
    <div class="blog-posts-grid">
        @foreach (var post in posts)
        {
            <article class="post-preview">
                <div class="post-header">
                    <h2><a href="/blog/@post.Slug">@post.Title</a></h2>
                    <div class="post-meta">
                        <span>üìÖ @post.PublishDate.ToString("dd. MMMM yyyy")</span>
                        @if (post.Tags.Any())
                        {
                            <span>üìÇ @string.Join(", ", post.Tags)</span>
                        }
                        <span>‚è±Ô∏è @post.ReadingTimeMinutes Min. Lesezeit</span>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(post.Summary))
                {
                    <div class="post-content">
                        <p>@post.Summary</p>
                    </div>
                }
                <div class="post-actions">
                    <a href="/blog/@post.Slug" class="btn">Weiterlesen</a>
                </div>
            </article>
        }
    </div>
}

@code {
    private List<BlogPost>? posts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await BlogPostService.GetAllPostsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog posts: {ex.Message}");
            posts = new List<BlogPost>();
        }
    }
}