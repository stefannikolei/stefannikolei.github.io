name: Deploy Blazor to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.preview-deployment.outputs.preview-url }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore -c Release

    - name: Publish
      run: dotnet publish -c Release -o dist

    - name: Upload artifact for main deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/wwwroot

    - name: Deploy Preview for PR
      if: github.event_name == 'pull_request'
      id: preview-deployment
      uses: rossjrw/pr-preview-action@v1
      with:
        source-dir: dist/wwwroot
        preview-branch: gh-pages-preview
        umbrella-dir: pr-previews

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  preview-comment:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Preview deployment')
          );
          
          const previewUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/pr-previews/pr-${context.issue.number}/`;
          const body = `ðŸš€ **Preview deployment ready!**
          
          Preview URL: ${previewUrl}
          
          This preview will be updated automatically when you push new commits to this PR.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }